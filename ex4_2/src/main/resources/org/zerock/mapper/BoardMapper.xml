<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
	PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
	"http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<!-- namespace 속성 값을 mapper인터페이스의 이름과 일치하게 작성 -->
<mapper namespace="org.zerock.mapper.BoardMapper">

	<sql id="criteria">
		<trim prefixOverrides="OR">
			<foreach item='type' collection="typeArr">
				<trim prefix="OR">
					<choose>
						<when test="type == 'T'.toString()">
							<!-- title like '%'||#{keyword}||'%' -->
							<!-- 오라클이랑 mysql이랑 명령이 다름 -->
							title like '%${keyword}%'
						</when>
						<when test="type == 'C'.toString()">
							<!-- content like '%'||#{keyword}||'%' -->
							<!-- content like CONCAT('%',#{keyword},'%') -->
							content like '%${keyword}%'

						</when>
						<when test="type == 'W'.toString()">
							<!-- writer like '%'||#{keyword}||'%' -->
							<!-- writer like CONCAT('%',#{keyword},'%') -->
							writer like '%${keyword}%'
						</when>
					</choose>
				</trim>
			</foreach>
		</trim>

	</sql>




	<!-- select의 id 속성값은 메서드의 이름과 일치하게 작성 resultType 속성의 값은 select 쿼리의 결과를 특정 
		클래스의 객체로 만들기 위해서 설정 -> 밑 쿼리의 결과를 BoardVO클래스의 객체로 만들기 위한 설정. -->
	<select id="getList" resultType="org.zerock.domain.BoardVO">
		<!-- CDATA는 xml에서 부등호를 사용하기 위해서 사용 -->
<![CDATA[
select * from tbl_board where bno<100
]]>
	</select>


	<select id="getListWithPaging"
		resultType="org.zerock.domain.BoardVO">

		select * from tbl_board

		<!-- <trim prefixOverrides="OR"> <foreach item='type' collection="typeArr"> 
			<trim prefix="OR"> <choose> <when test="type == 'T'.toString()"> title like 
			'%'||#{keyword}||'%' </when> <when test="type == 'C'.toString()"> content 
			like '%'||#{keyword}||'%' </when> <when test="type == 'W'.toString()"> writer 
			like '%'||#{keyword}||'%' </when> </choose> </trim> </foreach> </trim> -->
		<trim prefix="where" suffix="">
			<include refid="criteria"></include>
		</trim>
		order by bno desc
		limit #{limit_pageNum},#{amount}
		<!-- <![CDATA[ select A.* from ( select @rownum:=@rownum+1 rn,a.* from 
			tbl_board a, (select @rownum:=0) b where @rownum<#{pageNum}*#{amount} order 
			by bno desc ) A where rn>(#{pageNum}-1)*#{amount} ]]> -->
		<!-- select * from tbl_board 검색 조건을 추가하기 위해 주석처리 order by bno desc limit 
			#{limit_pageNum},#{amount}; -->

	</select>



	<select id="read" resultType="org.zerock.domain.BoardVO">
		select * from tbl_board
		where bno =
		#{bno}
	</select>

	<select id="getTotalCount" resultType="int">
		select count(*) from
		tbl_board
		where
		<trim prefix="" suffix=" and">
			<include refid="criteria"></include>
		</trim>
		bno>0


	</select>

	<!-- create(insert) 처리 -->
	<insert id="insert">	<!-- 단순히 시퀀스의 다음 값을 구해서 insert 할 때 사용 추가된 데이터의 PK는 알 수 없음 -->
		insert into tbl_board ( title , content , writer)
		values
		(#{title},#{content},#{writer})
	</insert>

	<insert id="insertSelectKey">
		<!-- selectKey:mybatis 어노테이션으로 주로 PK 값을 미리(before) sql문을 통해서 처리해 두고 특정한 
			이름으로 결과를 보관하는 방식 -->
		<selectKey keyProperty="bno" order="AFTER" resultType="long">
			<!-- dual에서 naxtval값을 뽑아옴 -->
			select max(bno) from tbl_board
		</selectKey>
		<!-- 테이블과 시퀀스에 소유주인 system을 붙어야 오류가 안남 시벌 -->
		insert into tbl_board (title,content,writer)
		<!-- seq_board.nextval을 #{bno}로 바꿔도 똑같이 돌아감 위의 select문으로 bno에 naxtval값을 
			저장해서 가능해보임 -->
		values (#{title},#{content},#{writer})
	</insert>

	<!-- delete 처리 -->
	<delete id="delete">
		delete from tbl_board where bno=#{bno}
	</delete>

	<!-- update 처리 -->
	<update id="update">
		update tbl_board
		set title=#{title},
		content=#{content},
		writer=#{writer},
		updateDate=current_timestamp
		where
		bno=#{bno}
	</update>
	<update id="updateReplyCnt">
		update tbl_board set replycnt= replycnt+#{amount} where bno=#{bno};
	</update>
</mapper>